/**
 * Import function triggers from their respective submodules:
 *
 * const {onCall} = require("firebase-functions/v2/https");
 * const {onDocumentWritten} = require("firebase-functions/v2/firestore");
 *
 * See a full list of supported triggers at https://firebase.google.com/docs/functions
 */

// Importa las librer√≠as principales de Firebase Functions (para configuraci√≥n global)
const { setGlobalOptions } = require("firebase-functions");

// Importa los m√≥dulos espec√≠ficos para triggers HTTP (onRequest) y Firestore (onDocumentCreated) de v2
const { onRequest } = require("firebase-functions/v2/https");
const { onDocumentCreated } = require("firebase-functions/v2/firestore");

// Importa el m√≥dulo de logging para registrar mensajes
const { logger } = require("firebase-functions/logger");

// Importa el SDK de Firebase Admin para interactuar con los servicios de Firebase (Firestore, Messaging, etc.)
const admin = require('firebase-admin');

// Inicializa el Admin SDK. Esto es esencial para que tus funciones puedan acceder a Firestore, enviar mensajes FCM, etc.
admin.initializeApp();

// Configuraci√≥n global para tus funciones (por ejemplo, n√∫mero m√°ximo de instancias)
// Para el control de costos y rendimiento, puedes establecer el n√∫mero m√°ximo de contenedores.
// Este l√≠mite es por funci√≥n, pero se aplica globalmente si no se sobreescribe en cada funci√≥n.
setGlobalOptions({ maxInstances: 10 });

// --- Tus Cloud Functions para Notificaciones ---

// 1. Funci√≥n de prueba HTTP para enviar una notificaci√≥n (v2 HTTP Trigger)
// Puedes llamar a esta funci√≥n desde tu navegador para probar el env√≠o de notificaciones.
// Ejemplo de URL (reemplaza 'TU_REGION' y 'TU_PROJECT_ID'):
// https://TU_REGION-TU_PROJECT_ID.cloudfunctions.net/sendTestNotification?userId=ID_DE_USUARIO_CON_TOKEN_FCM&title=Hola&body=Esto%20es%20una%20prueba
exports.sendTestNotification = onRequest(async (req, res) => {
  // Aseg√∫rate de que este userId exista en tu colecci√≥n 'users' de Firestore y tenga un 'fcmToken' v√°lido
  const userId = req.query.userId;
  const title = req.query.title || '¬°Hola desde Cloud Functions!';
  const body = req.query.body || 'Esta es una notificaci√≥n de prueba desde tu agenda.';

  if (!userId) {
    logger.warn("sendTestNotification: Missing 'userId' query parameter.");
    return res.status(400).send("Se requiere el par√°metro 'userId'.");
  }

  try {
    // Obtener el token FCM del usuario desde Firestore
    const userDoc = await admin.firestore().collection('users').doc(userId).get();
    const fcmToken = userDoc.data()?.fcmToken;

    if (!fcmToken) {
      logger.info(`sendTestNotification: No FCM token found for user: ${userId}`);
      return res.status(404).send(`No se encontr√≥ token FCM para el usuario ${userId}.`);
    }

    const message = {
      notification: {
        title: title,
        body: body,
      },
      data: { // Puedes enviar datos adicionales que tu app puede procesar (se recuperan en `payload.data`)
        context: 'test_notification',
        targetUserId: userId,
        // Importante: `click_action` define la URL a la que el navegador deber√≠a ir al hacer clic en la notificaci√≥n.
        // Aseg√∫rate de que esta URL sea accesible p√∫blicamente por tu app web.
        click_action: 'https://calendario-ea7e0.web.app/'
      },
      token: fcmToken,
    };

    const response = await admin.messaging().send(message);
    logger.info(`Notificaci√≥n de prueba enviada con √©xito a ${userId}:`, response);
    res.status(200).send('Notificaci√≥n de prueba enviada con √©xito!');

  } catch (error) {
    logger.error("Error enviando notificaci√≥n de prueba:", error);
    res.status(500).send('Error al enviar la notificaci√≥n de prueba: ' + error.message);
  }
});

// 2. Funci√≥n para enviar notificaciones cuando se crea un nuevo evento en tu calendario (v2 Firestore Trigger)
// Esta funci√≥n se activa autom√°ticamente cuando se a√±ade un nuevo documento a la colecci√≥n 'eventosCalendario'.
// ¬°ADAPTA LA RUTA DE FIRESTORE Y LA L√ìGICA INTERNA A TUS NECESIDADES!
// Si tu colecci√≥n se llama diferente o los campos del evento son otros, aj√∫stalos.
exports.sendNotificationOnNewCalendarEvent = onDocumentCreated('eventosCalendario/{eventId}', async (event) => {
  const newEventData = event.data.data(); // Los datos del nuevo documento creado
  const eventId = event.params.eventId; // El ID del documento
  
  // Asume que tu evento tiene un campo 'userId' que indica a qui√©n pertenece el evento.
  // Si un evento puede tener m√∫ltiples usuarios, necesitar√≠as iterar sobre una lista de IDs.
  const userIdToNotify = newEventData.userId; 

  if (!userIdToNotify) {
    logger.warn(`sendNotificationOnNewCalendarEvent: No 'userId' found in new event ${eventId}. Skipping notification.`);
    return null; // No hay a qui√©n notificar
  }

  try {
    // Obtener el token FCM del usuario receptor desde Firestore
    const userDoc = await admin.firestore().collection('users').doc(userIdToNotify).get();
    const fcmToken = userDoc.data()?.fcmToken;

    if (!fcmToken) {
      logger.info(`sendNotificationOnNewCalendarEvent: No FCM token found for user: ${userIdToNotify}.`);
      return null; // No se puede notificar si no hay token
    }

    const notificationPayload = {
      notification: {
        title: `üóìÔ∏è ¬°Nuevo evento en tu agenda!`, // Emoji para hacerla m√°s visible
        body: `"${newEventData.title || 'Evento sin t√≠tulo'}" el ${newEventData.date || 'fecha desconocida'}.`,
        icon: 'https://calendario-ea7e0.web.app/favicon.ico' // Aseg√∫rate de que esta URL sea p√∫blica y accesible
      },
      data: {
        eventType: 'calendar_event',
        eventId: eventId,
        // Puedes redirigir a una p√°gina espec√≠fica del evento al hacer clic
        click_action: `https://calendario-ea7e0.web.app/eventos/${eventId}` 
      },
      token: fcmToken,
    };

    const response = await admin.messaging().send(notificationPayload);
    logger.info(`Notificaci√≥n enviada con √©xito a ${userIdToNotify} por nuevo evento ${eventId}:`, response);
    return response;

  } catch (error) {
    logger.error(`Error enviando notificaci√≥n por nuevo evento de calendario ${eventId}:`, error);
    return null;
  }
});
